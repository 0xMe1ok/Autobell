#define UI_COLOR GP_BLUE

// BUILD - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
void build() {
  GP.BUILD_BEGIN(GP_DARK, 1920);
  GP.RELOAD_CLICK("BTN_SaveConfig,BTN_SaveSettings,BTN_SaveBellTime,BTN_Add_WeekdayBell,BTN_Del_WeekdayBell,BTN_Add_ShortBell,BTN_Del_ShortBell,BTN_Add_HolidayBell,BTN_Del_HolidayBell,BTN_Add_Date,BTN_Del_Date");
  GP.TITLE("Autobell üîî");
  GP.NAV_TABS_LINKS("/,/settings,/belltimeWeekdays,/config", "–ì–ª–∞–≤–Ω–∞—è,–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤–æ–Ω–∫–æ–≤,–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–æ–≤,–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", UI_COLOR);

  if (ui.uri() == "/config") { // –ö–æ–Ω—Ñ–∏–≥

  GP.NAV_TABS_LINKS("/config,/configNTP,/configUIAuth,/configOTA", "WiFi,NTP-—Å–µ—Ä–≤–µ—Ä,–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.PAGE_TITLE("Autobell - –ö–æ–Ω—Ñ–∏–≥ WIFI");
 
  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi üõú", UI_COLOR);
    GP.LABEL("–ò–º—è —Å–µ—Ç–∏: ");
    GP.TEXT("CFG/STR/WiFi_SSID", "–ò–º—è —Å–µ—Ç–∏", configFile["WiFi_SSID"]);
    GP.BREAK(); 
    GP.LABEL("–ü–∞—Ä–æ–ª—å: ");
    GP.PASS("CFG/STR/WiFi_PASS", "–ü–∞—Ä–æ–ª—å", configFile["WiFi_PASS"]);
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveConfig", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
    
  } else if (ui.uri() == "/configNTP") { // –ö–æ–Ω—Ñ–∏–≥

  GP.NAV_TABS_LINKS("/config,/configNTP,/configUIAuth,/configOTA", "WiFi,NTP-—Å–µ—Ä–≤–µ—Ä,–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.PAGE_TITLE("Autobell - –ö–æ–Ω—Ñ–∏–≥ NTP");

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ NTP-—Å–µ—Ä–≤–µ—Ä–∞ üïí", UI_COLOR);
    GP.LABEL("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ");
    GP.NUMBER("CFG/INT/NTP_TimeOffset", "–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, –∏–ª–∏ –∂–µ -1", configFile["NTP_TimeOffset"]);
    GP.BREAK(); 
    GP.LABEL("NTP-—Ö–æ—Å—Ç: ");
    GP.TEXT("CFG/STR/NTP_Host", "pool.ntp.org", configFile["NTP_Host"]);
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveConfig", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/configUIAuth") { // –ö–æ–Ω—Ñ–∏–≥

  GP.NAV_TABS_LINKS("/config,/configNTP,/configUIAuth,/configOTA", "WiFi,NTP-—Å–µ—Ä–≤–µ—Ä,–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.PAGE_TITLE("Autobell - –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–∞ ‚öôÔ∏è", UI_COLOR);
    GP.LABEL("–õ–æ–≥–∏–Ω: ");
    GP.TEXT("CFG/STR/UI_Login", "–õ–æ–≥–∏–Ω", configFile["UI_Login"]);
    GP.BREAK(); 
    GP.LABEL("–ü–∞—Ä–æ–ª—å: ");
    GP.PASS("CFG/STR/UI_Pass", "–ü–∞—Ä–æ–ª—å", configFile["UI_Pass"]);
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveConfig", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/configOTA") { // –ö–æ–Ω—Ñ–∏–≥

  GP.NAV_TABS_LINKS("/config,/configNTP,/configUIAuth,/configOTA", "WiFi,NTP-—Å–µ—Ä–≤–µ—Ä,–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.PAGE_TITLE("Autobell - OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ");

  GP.BLOCK_BEGIN(GP_TAB, "100%", "OTA –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", UI_COLOR);
    GP.OTA_FIRMWARE();
    GP.OTA_FILESYSTEM();
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveConfig", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/settings") { // –ù–∞—Å—Ç—Ä–æ–π–∫–∞

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é");
  GP.NAV_TABS_LINKS("/settings,/settingsDates,/settingsDuration", "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏,–î–∞—Ç—ã,–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");

  int tempBM; // temp bell mode
  GP.BLOCK_BEGIN(GP_TAB, "100%", "–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏", UI_COLOR);
    GP.LABEL("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: ");
    tempBM = bellModesFile[SH("D1")];
    GP.SELECT("MOD/INT/D1", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–í—Ç–æ—Ä–Ω–∏–∫: ");
    tempBM = bellModesFile[SH("D2")];
    GP.SELECT("MOD/INT/D2", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–°—Ä–µ–¥–∞: ");
    tempBM = bellModesFile[SH("D3")];
    GP.SELECT("MOD/INT/D3", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–ß–µ—Ç–≤–µ—Ä–≥: ");
    tempBM = bellModesFile[SH("D4")];
    GP.SELECT("MOD/INT/D4", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–ü—è—Ç–Ω–∏—Ü–∞: ");
    tempBM = bellModesFile[SH("D5")];
    GP.SELECT("MOD/INT/D5", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–°—É–±–±–æ—Ç–∞: ");
    tempBM = bellModesFile[SH("D6")];
    GP.SELECT("MOD/INT/D6", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
    GP.BREAK();

    GP.LABEL("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: ");
    tempBM = bellModesFile[SH("D7")];
    GP.SELECT("MOD/INT/D7", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", tempBM);
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveSettings", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/settingsDates") { // –ù–∞—Å—Ç—Ä–æ–π–∫–∞

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç");
  GP.NAV_TABS_LINKS("/settings,/settingsDates,/settingsDuration", "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏,–î–∞—Ç—ã,–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");

  int datesCount = bellDatesFile["DatesCount"];
  int currYear = ds.year();

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–î–∞—Ç—ã —Å –æ–ø—Ä–µ–¥. —Ä–µ–∂–∏–º–æ–º –∑–≤–æ–Ω–∫–∞", UI_COLOR); 
    for (int i = 1; i <= datesCount; i++) {
        DateMode datemode;
        bellDatesFile["Date_" + String(i)].writeTo(datemode);

        const int currDay = datemode.date.substring(0, 2).toInt();
        const int currMonth = datemode.date.substring(3, 5).toInt();
        GPdate gpdat;
        gpdat.day = currDay;
        gpdat.month = currMonth;
        gpdat.year = currYear;

        GP.DATE("DAT/DAT/Date_" + String(i), gpdat);
        GP.LABEL(" - ");
        GP.SELECT("DAT/INT/Date_" + String(i), "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", datemode.mode);
        GP.BREAK();
    }
    GP.BUTTON("BTN_Add_Date", "+");
    if (datesCount >= 1) GP.BUTTON("BTN_Del_Date", "-");
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveSettings", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/settingsDuration") { // –ù–∞—Å—Ç—Ä–æ–π–∫–∞

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞");
  GP.NAV_TABS_LINKS("/settings,/settingsDates,/settingsDuration", "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏,–î–∞—Ç—ã,–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞", UI_COLOR); 
    GP.NUMBER("SET/INT/BELL_RingingTime", "5000, –º—Å", settingsFile["BELL_RingingTime"]);
    GP.LABEL(" –º—Å");
  GP.BLOCK_END();    

  GP.BUTTON("BTN_SaveSettings", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/belltimeWeekdays") {

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–æ–≤");
  GP.NAV_TABS_LINKS("/belltimeWeekdays,/belltimeShort,/belltimeHolidays", "–†–∞–±–æ—á–∏–µ,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ,–ü—Ä–∞–∑–¥–Ω–∏–∫–∏");

  const int weekdayBellCount = bellTimeFile["Weekday_BellCount"];

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ó–≤–æ–Ω–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è", UI_COLOR); 
    for (int i = 1; i <= weekdayBellCount; i++) {
      GPtime time;
      bellTimeFile["Weekday_" + String(i)].writeTo(time);
      GP.TIME("TIM/TIM/Weekday_" + String(i), time);

      if (i % 2 == 1 && i != weekdayBellCount) {
        GP.LABEL(" - ");
      } else {
        GP.BREAK();
      }
    }
    GP.BUTTON("BTN_Add_WeekdayBell", "+");
    if (weekdayBellCount > 1) GP.BUTTON("BTN_Del_WeekdayBell", "-");
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveBellTime", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/belltimeShort") {

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–æ–≤");
  GP.NAV_TABS_LINKS("/belltimeWeekdays,/belltimeShort,/belltimeHolidays", "–ë—É–¥–Ω–∏,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ,–ü—Ä–∞–∑–¥–Ω–∏–∫–∏");

  const int shortBellCount = bellTimeFile["Short_BellCount"];

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ó–≤–æ–Ω–∫–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è", UI_COLOR); 
    for (int i = 1; i <= shortBellCount; i++) {
      GPtime time;
      bellTimeFile["Short_" + String(i)].writeTo(time);
      GP.TIME("TIM/TIM/Short_" + String(i), time);

      if (i % 2 == 1 && i != shortBellCount) {
        GP.LABEL(" - ");
      } else {
        GP.BREAK();
      }
    }
    GP.BUTTON("BTN_Add_ShortBell", "+");
    if (shortBellCount > 1) GP.BUTTON("BTN_Del_ShortBell", "-");
  GP.BLOCK_END();  

  GP.BUTTON("BTN_SaveBellTime", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else if (ui.uri() == "/belltimeHolidays") {

  GP.PAGE_TITLE("Autobell - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–æ–≤");
  GP.NAV_TABS_LINKS("/belltimeWeekdays,/belltimeShort,/belltimeHolidays", "–ë—É–¥–Ω–∏,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ,–ü—Ä–∞–∑–¥–Ω–∏–∫–∏");

  const int holidayBellCount = bellTimeFile["Holiday_BellCount"];

  GP.BLOCK_BEGIN(GP_TAB, "100%", "–ó–≤–æ–Ω–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –¥–Ω—è", UI_COLOR); 
    for (int i = 1; i <= holidayBellCount; i++) {
      GPtime time;
      bellTimeFile["Holiday_" + String(i)].writeTo(time);
      GP.TIME("TIM/TIM/Holiday_" + String(i), time);

      if (i % 2 == 1 && i != holidayBellCount) {
        GP.LABEL(" - ");
      } else {
        GP.BREAK();
      }
    }
    GP.BUTTON("BTN_Add_HolidayBell", "+");
    if (holidayBellCount > 1) GP.BUTTON("BTN_Del_HolidayBell", "-");
  GP.BLOCK_END();

  GP.BUTTON("BTN_SaveBellTime", "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è");

  } else { // –ì–ª–∞–≤–Ω–∞—è

    GP.PAGE_TITLE("Autobell - –ì–ª–∞–≤–Ω–∞—è");
    GP.UPDATE("LBL_RTC_DateTime,LBL_RTC_DayOfWeek,LBL_BellStatus,LBL_NextBellTime,LBL_TimeUntilBell");
    
    GP.BLOCK_BEGIN(GP_TAB, "100%", "–î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ", UI_COLOR);
      GP.LABEL("–°—Ç–∞—Ç—É—Å: ");
      String bellStatus = isRinging ? "–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω üîî" : "–ó–≤–æ–Ω–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω üîï";
      GP.LABEL(bellStatus, "LBL_BellStatus");
      GP.BREAK();

      GP.LABEL("–†–µ–∂–∏–º –∑–≤–æ–Ω–∫–∞: ");
      GP.SELECT("SEL_BellMode", "–í—ã—Ö–æ–¥–Ω–æ–π,–†–∞–±–æ—á–∏–π,–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π,–ü—Ä–∞–∑–¥–Ω–∏–∫", bellmode);
      GP.BREAK();

      GP.LABEL("–°–ª–µ–¥—É—é—â–∏–π –∑–≤–æ–Ω–æ–∫ –≤:");
      String nextBell = isNotMoreBelling() ? "–ë–æ–ª—å—à–µ –∑–≤–æ–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç!" : daySecondsToHMS(nextBellTime);
      GP.LABEL(nextBell, "LBL_NextBellTime");
      GP.BREAK();

      GP.LABEL("–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:");
      String untilBell = daySecondsToHMS(timeUntilBell);
      GP.LABEL(untilBell, "LBL_TimeUntilBell");
      GP.BREAK();
        
      GP.BUTTON("BTN_EnableBell", "–í–∫–ª—é—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫");
    GP.BLOCK_END();

    GP.BLOCK_BEGIN(GP_TAB, "100%", "–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏", UI_COLOR);
      GP.LABEL("RTC: ");
      GP.LABEL(ds.toString(), "LBL_RTC_DateTime");
      GP.LABEL(getDayOfWeek(), "LBL_RTC_DayOfWeek");
      GP.BREAK();
      
      GP.BUTTON("BTN_RTC_Update", "–û–±–Ω–æ–≤–∏—Ç—å –ø–æ NTP-—Å–µ—Ä–≤–µ—Ä—É");
      GP.BUTTON("BTN_RTC_Update_UI", "–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
    GP.BLOCK_END();
  }

  GP.BUILD_END();
}